-- Enable UUID extension (Supabase has this by default)
-- CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Groups table
CREATE TABLE groups (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name VARCHAR(100) NOT NULL,
    invite_code VARCHAR(20) UNIQUE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Group members table
CREATE TABLE members (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    group_id UUID REFERENCES groups(id) ON DELETE CASCADE,
    wallet_address VARCHAR(100) NOT NULL,
    name VARCHAR(50),
    joined_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(group_id, wallet_address)
);

-- Expenses table
CREATE TABLE expenses (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    group_id UUID REFERENCES groups(id) ON DELETE CASCADE,
    title VARCHAR(200) NOT NULL,
    total_amount DECIMAL(18, 8) NOT NULL,
    currency VARCHAR(10) NOT NULL, -- SOL, USDC, USDT, ETH
    paid_by_wallet VARCHAR(100) NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Expense splits table (who owes what)
CREATE TABLE splits (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    expense_id UUID REFERENCES expenses(id) ON DELETE CASCADE,
    wallet_address VARCHAR(100) NOT NULL,
    amount_owed DECIMAL(18, 8) NOT NULL,
    is_paid BOOLEAN DEFAULT FALSE,
    payment_tx_hash VARCHAR(100),
    paid_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Enable Row Level Security (RLS)
ALTER TABLE groups ENABLE ROW LEVEL SECURITY;
ALTER TABLE members ENABLE ROW LEVEL SECURITY;
ALTER TABLE expenses ENABLE ROW LEVEL SECURITY;
ALTER TABLE splits ENABLE ROW LEVEL SECURITY;

-- RLS Policies (Basic - you may want to customize these)
-- Allow users to read groups they're members of
CREATE POLICY "Users can view groups they belong to" ON groups
    FOR SELECT USING (
        id IN (
            SELECT group_id FROM members
            WHERE wallet_address = current_setting('app.user_wallet')
        )
    );

-- Allow group members to read member lists
CREATE POLICY "Group members can view member lists" ON members
    FOR SELECT USING (
        group_id IN (
            SELECT group_id FROM members
            WHERE wallet_address = current_setting('app.user_wallet')
        )
    );

-- Similar policies for expenses, splits
CREATE POLICY "Group members can view expenses" ON expenses
    FOR SELECT USING (
        group_id IN (
            SELECT group_id FROM members
            WHERE wallet_address = current_setting('app.user_wallet')
        )
    );

CREATE POLICY "Group members can view splits" ON splits
    FOR SELECT USING (
        expense_id IN (
            SELECT e.id FROM expenses e
            JOIN members m ON e.group_id = m.group_id
            WHERE m.wallet_address = current_setting('app.user_wallet')
        )
);
